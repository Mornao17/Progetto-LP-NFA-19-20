%%%%Progetto Espressioni Regolari

%%%Implementazione predicato is_regexp(RE)
%%%Caso di un simbolo
is_regexp(RE) :-
    atomic(RE).

%%%Caso di una funzione con un simbolo
is_regexp(RE) :-
    nonvar(RE),
    RE =.. [Funz, Simb],
    controllo_funz(Funz),
    is_regexp(Simb).

%%%Caso di una funzione con pi√π simboli
is_regexp(RE) :-
    nonvar(RE),
    RE =.. [Funz | Simb],
    controllo_funz(Funz),
    controllo_simb(Simb).

%%%Controllo che la funzione sia accettata
controllo_funz(Funz):-
    term_string(Funz, StringFunz),
    (StringFunz="seq";
    StringFunz="or";
    StringFunz="plus";
    StringFunz="star").

%%%Caso base sul controllo del simbolo
controllo_simb([]).

%%%Controllo ogni simbolo della funzione(se atomo o funzione)
controllo_simb([X|Xs]):-
    is_regexp(X),
    controllo_simb(Xs).

%%%Implementazione predicato nfa_regexp_comp(FA_Id, RE)
%%%nfa_regexp_comp(FA_Id, RE).
